on:
  push:
    tags:
      - v[0-9]+*

name: Release

jobs:
  getdicts:
    name: Fetch dictionaries
    runs-on: ubuntu-22.04
    steps:

      # Github runners don't have deb-src lines installed.
      # Add a sources.list with both deb and deb-src (so they are in sync)
      - name: Update sources list
        shell: bash
        run: |
            echo "deb http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse" > mylist.list
            echo "deb-src http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse" >> mylist.list
            echo "deb http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse" >> mylist.list
            echo "deb-src http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse" >> mylist.list
            echo "deb http://archive.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse" >> mylist.list
            echo "deb-src http://archive.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse" >> mylist.list
            sudo mv mylist.list /etc/apt/sources.list.d/
            sudo apt-get --quiet update --assume-yes

      - name: Install dictionaries
        run: |
          sudo apt-get install hunspell-en-us hunspell-de-de hunspell-fr \
              hunspell-es hunspell-ru

      - name: Populate output dir
        run: |
          mkdir dicts
          cp /usr/share/hunspell/en_US.* dicts/
          cp /usr/share/hunspell/de_DE.* dicts/
          cp /usr/share/hunspell/fr_FR.* dicts/
          cp /usr/share/hunspell/es_ES.* dicts/
          cp /usr/share/hunspell/ru_RU.* dicts/

      - name: Get dict sources
        run: |
          mkdir -p dict-sources
          cd dict-sources
          apt-get source --download-only hunspell-en-us
          apt-get source --download-only hunspell-de-de
          apt-get source --download-only hunspell-fr
          apt-get source --download-only hunspell-es
          apt-get source --download-only hunspell-ru
          cd ..
          tar cfvz dict-sources-"${{ github.ref_name }}".tar.gz dict-sources/

      - name: Upload dicts to github
        uses: actions/upload-artifact@v3
        with:
          name: dicts
          path: dicts/
          if-no-files-found: error

      - name: Upload dict sources to github
        uses: actions/upload-artifact@v3
        with:
          name: archives
          path: dict-sources-${{ github.ref_name }}.tar.gz
          if-no-files-found: error

  build:
    needs: getdicts
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            extension:
            archive: tar.gz
          - os: windows-latest
            name: windows
            extension: .exe
            archive: zip
    name: ${{ matrix.name }} build
    runs-on: ${{ matrix.os }}
    steps:

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install dependencies
        if: ${{ (matrix.os == 'ubuntu-latest') }}
        run: sudo apt-get install libgtk-3-dev

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Get version
        id: version
        shell: bash
        run: |
          version=v$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          pkgdir="ck3spell-${{ matrix.name }}-$version"
          echo "::set-output name=version::$version"
          echo "::set-output name=pkgdir::$pkgdir"

      - name: Verify version against tag
        shell: bash
        run: |
          test "${{ github.ref_name }}" = "${{ steps.version.outputs.version }}"

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Create output dir
        shell: bash
        run: |
          mkdir ${{ steps.version.outputs.pkgdir }}
          cp -p README.md LICENSE screenshots/sample.png target/release/ck3spell${{ matrix.extension }} ${{ steps.version.outputs.pkgdir }}

      - name: Fetch dictionary artifact
        uses: actions/download-artifact@v3
        with:
          name: dicts
          path: ${{ steps.version.outputs.pkgdir }}/dicts/

      - name: Archive .zip
        uses: vimtor/action-zip@v1
        if: ${{ matrix.archive == 'zip' }}
        with:
          files: ${{ steps.version.outputs.pkgdir }}/
          dest: ${{ steps.version.outputs.pkgdir }}.zip

      - name: Archive .tar.gz
        if: ${{ matrix.archive == 'tar.gz' }}
        run: tar cfvz ${{ steps.version.outputs.pkgdir }}.tar.gz  ${{ steps.version.outputs.pkgdir }}/

      - name: Upload Archive
        uses: actions/upload-artifact@v3
        with:
          name: archives
          path: ${{ steps.version.outputs.pkgdir }}.${{ matrix.archive }}
          if-no-files-found: error

  release:
    needs: build
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Archives
        uses: actions/download-artifact@v3
        with:
          name: archives

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: '*.zip,*.tar.gz'
